{"version":3,"file":"static/js/367.fa460a97.chunk.js","mappings":"6LACA,EAA0B,yBAA1B,EAAoE,gCAApE,EAA4G,uBAA5G,EAAkJ,8BAAlJ,EAAkM,iCAAlM,EAA4O,wBAA5O,EAA6Q,wBAA7Q,EAAgT,0BAAhT,EAAuX,yBAAvX,EAA4Z,2BAA5Z,EAAmc,2B,mBCUtbA,EAA6C,SAACC,GACzD,IAAMC,EAAU,kBAAMD,EAAME,eAAeF,EAAMG,OAGjD,OACE,iBAAKC,UAAWC,EAAhB,WACE,SAAC,KAAD,CAASD,UAAS,UAAKC,GAAYC,QAASL,EAASM,gBAAiBF,EAC7DG,GAAI,YAAcR,EAAMG,KAAKM,GADtC,SAC2CT,EAAMG,KAAKO,QACtD,SAAC,KAAD,CAASN,UAAS,UAAKC,GAAYC,QAASL,EAASM,gBAAiBF,EAAUG,GAAI,YAAcR,EAAMG,KAAKM,GAA7G,UACE,gBAAKE,IAAKX,EAAMG,KAAKS,IAAKC,MAAO,OAAQC,OAAQ,e,uCCnBzD,EAA8B,qCAA9B,EAAsF,0CAAtF,EAAuJ,8CAAvJ,EAA4M,8B,6BCQ/LC,EAAkB,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,KAASjB,GAA2B,YACpEkB,EAAUD,EAAKE,SAAWF,EAAKG,MAErC,OAAQ,iCACN,iBAAKhB,UAAWC,EAAhB,WAAwB,0CAEOD,UAAWC,EAAgB,KAAOa,EAAUb,EAAqB,KAC7DL,GAAWgB,GAAWC,KACvD,SAACI,EAAA,EAAD,CAAQX,KAAM,WAAYY,KAAM,QAASC,SAAU,aAChDC,MAAO,aAEZ,yBAAMN,IAAW,gBAAKd,UAAWC,EAAhB,SAAyCY,EAAKG,cCHtDK,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAZiB,SAAC1B,GAEnD,OACE,iBAAM4B,SAAU5B,EAAM6B,aAAtB,UACE,gBAAKzB,UAAWC,EAAhB,UACE,SAACyB,EAAA,EAAD,CAAOC,UAAWhB,EAAiBL,KAAM,iBAAkBsB,YAAa,8BCThF,EAAgC,qCAAhC,EAA0F,0CAA1F,EAAiJ,kCAAjJ,EAAgM,kCAAhM,EAAsP,yCAAtP,EAA4S,kCCO/RC,EAAgB,SAACjC,GAC5B,OACE,iBACEI,UAAWC,EADb,WAEE,iBAAKD,UAAWC,EAAhB,WACE,gBAAKM,IAAKX,EAAMkC,OAAOtB,OACvB,iBAAKR,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAA+BL,EAAMkC,OAAOxB,QAE5C,gBAAKN,UAAWC,EAAhB,SAAsCL,EAAMmC,QAAQA,iBAGxD,gBAAK/B,UAAWC,EAAhB,SAA+BL,EAAMmC,QAAQC,WCnBnD,EAA0B,2BAA1B,EAAoE,gCAApE,EAA2G,wBAA3G,EAA0I,wBAA1I,EAAgL,+BAAhL,EAAsN,wBCOzMC,EAAY,SAACrC,GACxB,OACE,iBACEI,UAAWC,EADb,WAEE,iBAAKD,UAAWC,EAAhB,WACE,gBAAKM,IAAKX,EAAMsC,aAChB,iBAAKlC,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAyBL,EAAMuC,YAE/B,gBAAKnC,UAAWC,EAAhB,SAAgCL,EAAMmC,QAAQA,iBAGlD,gBAAK/B,UAAWC,EAAhB,SAAyBL,EAAMmC,QAAQC,W,6BCJ7C,GAAeI,E,QAAAA,KAA6BC,EAAAA,EAAAA,KARtB,SAACC,GAA6B,IAAD,EACjD,MAAO,CACLC,YAAaD,EAAMC,YACnBJ,SAAUG,EAAME,OAAOC,MACvBP,UAAS,UAACI,EAAMI,YAAYC,eAAnB,aAAC,EAA2BC,OAAOC,SAIqB,CACnEC,WAAAA,EAAAA,GAAYC,iBAAAA,EAAAA,KACVC,EAAAA,EAFJ,ECN4C,SAACpD,GAC3C,IAAIsC,EAAYtC,EAAMsC,WAAN,UAAsBe,eAAtB,qBACVV,EAAc3C,EAAM2C,YACpBW,GAAYC,EAAAA,EAAAA,QAAO,MACzB,GAAoCC,EAAAA,EAAAA,UAAqBb,EAAYc,QAAQ,IAA7E,eAAKC,EAAL,KAAkBxD,EAAlB,KACA,GAA0BsD,EAAAA,EAAAA,WAAkB,GAA5C,eAAKG,EAAL,KAAaC,EAAb,KAGIC,EAAelB,EAAYc,QAAQK,KAAI,SAAAC,GAAE,OAC3C,SAAChE,EAAD,CAAwBI,KAAM4D,EAAI7D,eAAgBA,GAAjC6D,EAAGtD,OAClBuD,EAAcrB,EAAYsB,SAASH,KAAI,SAAAC,GAAE,MAAkB,MAAdA,EAAGG,QAChD,SAAC7B,EAAD,CAAWF,QAAS4B,EAAIxB,SAAUvC,EAAMuC,SAAUD,UAAWA,KAC7D,SAACL,EAAD,CAAeE,QAAS4B,EAAI7B,OAAQwB,OAsBxC,OACE,iBAAKtD,UAAWC,EAAhB,WACE,iBAAKD,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SACGwD,KAEH,gBAAKzD,UAAWC,KAChB,iBAAKD,UAAWC,EAAhB,UACG2D,EACAL,IAAU,iBAAMvD,UAAWC,EAAjB,UAA8B,SAAC,KAAD,CAAWQ,MAAO,YAC3D,gBAAKT,UAAWC,EAAa8D,IAAKb,WAItC,gBAAKhD,QArBc,SAAC8D,GACG,WAArBA,EAAEC,OAAOC,SAGXhB,EAAUiB,QAAQC,eAAe,CAACC,SAAU,YAiB5C,UAA8B,SAAChD,EAAD,CAAqBG,SAlCtC,SAAC8C,GACZA,EAASC,eAAeC,SAC1B5E,EAAMkD,WAAWwB,EAASC,gBAC1BD,EAASC,eAAiB,GAC1Bf,GAAU,GACViB,YAAW,WACT7E,EAAMmD,mBACNS,GAAU,KACT","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/AddMessageForm/InputForMessage.module.css?d3e1","components/Dialogs/AddMessageForm/InputForMessage.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","webpack://samurai-way/./src/components/Dialogs/Message/FriendMessage/FriendMessage.module.css?75d4","components/Dialogs/Message/FriendMessage/FriendMessage.tsx","webpack://samurai-way/./src/components/Dialogs/Message/MyMessage/MyMessage.module.css?b394","components/Dialogs/Message/MyMessage/MyMessage.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__TN-Cn\",\"dialogsWrapper\":\"Dialogs_dialogsWrapper__y-Q32\",\"cross\":\"Dialogs_cross__EDiRT\",\"dialogsItems\":\"Dialogs_dialogsItems__-twkq\",\"dialogsItemsImg\":\"Dialogs_dialogsItemsImg__fjMwx\",\"dialog\":\"Dialogs_dialog__smq6R\",\"active\":\"Dialogs_active__JZz+y\",\"messages\":\"Dialogs_messages__QEj23\",\"message\":\"Dialogs_message__S6a4L\",\"addForm\":\"Dialogs_addForm__S7uGk\",\"bottomRef\":\"Dialogs_bottomRef__wIUvx\",\"preloader\":\"Dialogs_preloader__RGPui\"};","import s from '../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\nimport {DialogType} from '../../../Redux/diologs-reducer';\r\n\r\ntype DialogsDataPropsType = {\r\n  user: DialogType\r\n  setCurrentUser: (user: DialogType) => void\r\n}\r\n\r\n\r\nexport const DialogItem: React.FC<DialogsDataPropsType> = (props) => {\r\n  const setUser = () => props.setCurrentUser(props.user);\r\n\r\n\r\n  return (\r\n    <div className={s.dialogsItemsImg}>\r\n      <NavLink className={`${s.dialog}`} onClick={setUser} activeClassName={s.active}\r\n               to={'/dialogs/' + props.user.id}>{props.user.name}</NavLink>\r\n      <NavLink className={`${s.dialog}`} onClick={setUser} activeClassName={s.active} to={'/dialogs/' + props.user.id}>\r\n        <img src={props.user.srs} width={'50px'} height={'50px'}/></NavLink>\r\n    </div>);\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"InputForMessage_formControl__hE8Sa\",\"formControlError\":\"InputForMessage_formControlError__QYzZh\",\"spanFormControlError\":\"InputForMessage_spanFormControlError__dBeGb\",\"form\":\"InputForMessage_form__TgMfC\"};","import React from 'react';\r\nimport s from './InputForMessage.module.css';\r\nimport {Button} from '../../common/Button/Button';\r\n\r\ntype InputPropsType = {\r\n  input: any, meta: { error: string, touched: boolean }\r\n  isCustom?: boolean\r\n};\r\n\r\nexport const InputForMessage = ({input, meta, ...props}: InputPropsType) => {\r\n  const isError = meta.touched && meta.error;\r\n\r\n  return (<>\r\n    <div className={s.form}><input\r\n\r\n                                   className={s.formControl + ' ' + (isError ? s.formControlError : '')}\r\n                                   {...props} {...input} {...meta} />\r\n      <Button name={'Add post'} size={'large'} callBack={() => {\r\n      }} color={'blue'}/></div>\r\n\r\n    <div>{isError && <div className={s.spanFormControlError}>{meta.error}</div>}</div>\r\n  </>);\r\n};","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport React from 'react';\r\nimport s from '../Dialogs.module.css';\r\nimport {InputForMessage} from './InputForMessage';\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps> = (props) => {\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={s.addForm}>\r\n        <Field component={InputForMessage} name={'newMessageBody'} placeholder={'Enter your message'}/>\r\n      </div>\r\n\r\n\r\n    </form>\r\n  );\r\n};\r\nexport const AddMessageReduxForm = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);","// extracted by mini-css-extract-plugin\nexport default {\"friendMessage\":\"FriendMessage_friendMessage__WhCsF\",\"friendImageAndText\":\"FriendMessage_friendImageAndText__iXbzA\",\"friendText\":\"FriendMessage_friendText__YrIed\",\"friendName\":\"FriendMessage_friendName__sAEa2\",\"friendMessageText\":\"FriendMessage_friendMessageText__znA4M\",\"friendTime\":\"FriendMessage_friendTime__7rzg2\"};","import {DialogType, MassageType} from '../../../../Redux/diologs-reducer';\r\nimport s from './FriendMessage.module.css';\r\n\r\ntype FriendMessagePropsType = {\r\n  message: MassageType,\r\n  friend: DialogType\r\n\r\n}\r\nexport const FriendMessage = (props: FriendMessagePropsType) => {\r\n  return (\r\n    <div\r\n      className={s.friendMessage}>\r\n      <div className={s.friendImageAndText}>\r\n        <img src={props.friend.srs}/>\r\n        <div className={s.friendText}>\r\n          <div className={s.friendName}>{props.friend.name}\r\n          </div>\r\n          <div className={s.friendMessageText}>{props.message.message}</div>\r\n        </div>\r\n      </div>\r\n      <div className={s.friendTime}>{props.message.time}</div>\r\n    </div>\r\n  );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"MyMessage_message__MITEC\",\"imageAndText\":\"MyMessage_imageAndText__Zpaif\",\"text\":\"MyMessage_text__fbZD2\",\"name\":\"MyMessage_name__9BRQ5\",\"messageText\":\"MyMessage_messageText__-xufB\",\"time\":\"MyMessage_time__IuLdr\"};","import {MassageType} from '../../../../Redux/diologs-reducer';\r\nimport s from \"./MyMessage.module.css\"\r\ntype MyMessagePropsType = {\r\n  message: MassageType,\r\nuserPhoto:string\r\nuserName:string\r\n\r\n}\r\nexport const MyMessage = (props: MyMessagePropsType) => {\r\n  return (\r\n    <div\r\n      className={s.message}>\r\n      <div className={s.imageAndText}>\r\n        <img src={props.userPhoto}/>\r\n        <div className={s.text}>\r\n          <div className={s.name}>{props.userName}\r\n          </div>\r\n          <div className={s.messageText}>{props.message.message}</div>\r\n        </div>\r\n      </div>\r\n      <div className={s.time}>{props.message.time}</div>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport {addFriendMessage, addMessage} from '../../Redux/diologs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../Redux/redux-store';\r\nimport {WithAuthRedirect} from '../../hoc';\r\nimport {compose} from 'redux';\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n    userName: state.authMe.login,\r\n    userPhoto:state.profilePage.profile?.photos.small\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n  addMessage, addFriendMessage\r\n}), WithAuthRedirect)(Dialogs);\r\n","import React, {MouseEvent, useRef, useState} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {DialogsType, DialogType, MessagesType} from '../../Redux/diologs-reducer';\r\nimport {AddMessageReduxForm} from './AddMessageForm/AddMessageForm';\r\nimport {FriendMessage} from './Message/FriendMessage/FriendMessage';\r\nimport {MyMessage} from './Message/MyMessage/MyMessage';\r\nimport {Preloader} from '../common';\r\n\r\n\r\nexport const Dialogs: React.FC<PropsType> = (props) => {\r\n  let userPhoto = props.userPhoto || `${process.env.PUBLIC_URL}/img/myPhoto.jpeg`;\r\n  const dialogsPage = props.dialogsPage;\r\n  const bottomRef = useRef(null);\r\n  let [currentUser, setCurrentUser] = useState<DialogType>(dialogsPage.dialogs[0]);\r\n  let [loader, setLoader] = useState<boolean>(false);\r\n\r\n\r\n  let dialogsItems = dialogsPage.dialogs.map(el =>\r\n    <DialogItem key={el.id} user={el} setCurrentUser={setCurrentUser}/>);\r\n  let allMessages = dialogsPage.messages.map(el => el.userId === '0'\r\n    ? <MyMessage message={el} userName={props.userName} userPhoto={userPhoto}/>\r\n    : <FriendMessage message={el} friend={currentUser}/>\r\n  );\r\n  const onSubmit = (formDate: any) => {\r\n    if (formDate.newMessageBody.trim()) {\r\n      props.addMessage(formDate.newMessageBody);\r\n      formDate.newMessageBody = '';\r\n      setLoader(true);\r\n      setTimeout(() => {\r\n        props.addFriendMessage();\r\n        setLoader(false);\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n\r\n  const scrollToBottom = (e: MouseEvent<HTMLDivElement> | any) => {\r\n    if (e.target.tagName === 'BUTTON') {\r\n      debugger\r\n      // @ts-ignore\r\n      bottomRef.current.scrollIntoView({behavior: 'smooth'});\r\n    }\r\n  };\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsWrapper}>\r\n        <div className={s.dialogsItems}>\r\n          {dialogsItems}\r\n        </div>\r\n        <div className={s.cross}></div>\r\n        <div className={s.messages}>\r\n          {allMessages}\r\n          {loader && <span className={s.preloader}><Preloader width={'30px'}/></span>}\r\n          <div className={s.bottomRef} ref={bottomRef}></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div onClick={scrollToBottom}><AddMessageReduxForm onSubmit={onSubmit}/></div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\ntype PropsType = {\r\n  dialogsPage: {\r\n    dialogs: DialogsType\r\n    messages: MessagesType\r\n  }\r\n  addMessage: (message: string) => void, userName: string, userPhoto: string\r\n  addFriendMessage: () => void\r\n};\r\n\r\n// addMessage: (message: string) => void\r\n// updateNewMessageText: (message: string) => void\r\n// newMessageText:string\r\n\r\n\r\n// let newMessageElement = React.createRef<HTMLTextAreaElement>();\r\n// // const addMessage = () => {\r\n// //     let text = newMessageElement.current?.value;\r\n// //     if (text) {\r\n// //         props.addMessage();\r\n// //     }\r\n// // };\r\n// // const OnClickEnter = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n// //     if (e.key === 'Enter') {\r\n// //         addMessage();\r\n// //     }\r\n// // };"],"names":["DialogItem","props","setUser","setCurrentUser","user","className","s","onClick","activeClassName","to","id","name","src","srs","width","height","InputForMessage","input","meta","isError","touched","error","Button","size","callBack","color","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","FriendMessage","friend","message","time","MyMessage","userPhoto","userName","compose","connect","state","dialogsPage","authMe","login","profilePage","profile","photos","small","addMessage","addFriendMessage","WithAuthRedirect","process","bottomRef","useRef","useState","dialogs","currentUser","loader","setLoader","dialogsItems","map","el","allMessages","messages","userId","ref","e","target","tagName","current","scrollIntoView","behavior","formDate","newMessageBody","trim","setTimeout"],"sourceRoot":""}