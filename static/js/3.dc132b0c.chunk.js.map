{"version":3,"file":"static/js/3.dc132b0c.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAoE,gCAApE,EAAmH,8BAAnH,EAAmK,iCAAnK,EAA6M,wBAA7M,EAA8O,wBAA9O,EAAiR,0BAAjR,EAAqT,yBAArT,EAAwV,yB,mBCU3UA,EAA4C,SAACC,GACtD,OACI,iBAAKC,UAAWC,EAAhB,WACI,SAAC,KAAD,CAASD,UAAS,UAAKC,GAAYC,gBAAiBD,EAAUE,GAAI,YAAcJ,EAAMK,GAAtF,SAA2FL,EAAMM,QACjG,UAAC,KAAD,CAASL,UAAS,UAAKC,GAAYC,gBAAiBD,EAAUE,GAAI,YAAcJ,EAAMK,GAAtF,eAA2F,gBAAKE,IAAKP,EAAMQ,IAAKC,MAAO,OAAQC,OAAQ,gBCTtIC,EAAqC,SAACX,GAC/C,OACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMY,W,uCCkEpCC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAjBwB,SAACd,GAGjD,OACI,iBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,iBAAKhB,UAAWC,EAAhB,WACI,SAACgB,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAOd,KAAM,iBACxBe,YAAa,qBAAsBC,MAAO,CAACb,MAAO,QAASC,OAAQ,QACnEa,SAAU,CAACC,EAAAA,GAAeC,EAAAA,OACjC,6C,mBC7ChB,GAAeC,E,QAAAA,KAA6BC,EAAAA,EAAAA,KARtB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAM0C,CACjEC,WAAAA,EAAAA,IACDC,EAAAA,EAFH,EDJ4C,SAAC/B,GAEzC,IAAIgC,EAAehC,EAAM6B,YAAYI,QAAQC,KAAI,SAAAC,GAAE,OAC/C,SAACpC,EAAD,CAAwBO,KAAM6B,EAAG7B,KAAMD,GAAI8B,EAAG9B,GAAIG,IAAK2B,EAAG3B,KAAzC2B,EAAG9B,OAEpB+B,EAAgBpC,EAAM6B,YAAYQ,SAASH,KAAI,SAAAC,GAAE,OAAI,SAACxB,EAAD,CAAqBC,QAASuB,EAAGvB,SAAnBuB,EAAG9B,OAS1E,OACI,iCACI,gBAAKJ,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK8B,KAEL,gBAAK/B,UAAWC,EAAhB,SACKkC,UAMb,gBAAKnC,UAAWC,EAAhB,UACI,SAACW,EAAD,CAAqBG,SArBhB,SAACsB,GACdC,QAAQC,IAAIF,GACZtC,EAAM8B,WAAWQ,EAASG,gBAC1BH,EAASG,eAAiB","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__TN-Cn\",\"dialogsWrapper\":\"Dialogs_dialogsWrapper__y-Q32\",\"dialogsItems\":\"Dialogs_dialogsItems__-twkq\",\"dialogsItemsImg\":\"Dialogs_dialogsItemsImg__fjMwx\",\"dialog\":\"Dialogs_dialog__smq6R\",\"active\":\"Dialogs_active__JZz+y\",\"messages\":\"Dialogs_messages__QEj23\",\"message\":\"Dialogs_message__S6a4L\",\"addForm\":\"Dialogs_addForm__S7uGk\"};","import s from '../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\ntype DialogsDataPropsType = {\r\n    name: string\r\n    id: string\r\n    srs:string\r\n}\r\n\r\n\r\nexport const DialogItem:React.FC<DialogsDataPropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialogsItemsImg}>\r\n            <NavLink className={`${s.dialog}`} activeClassName={s.active} to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n            <NavLink className={`${s.dialog}`} activeClassName={s.active} to={'/dialogs/' + props.id}> <img src={props.srs} width={\"50px\"} height={\"50px\"}/></NavLink>\r\n        </div>);\r\n};","import s from '../Dialogs.module.css';\r\nimport React from 'react';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nexport const Message:React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n};","import React, {KeyboardEvent} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {DialogsType, MessagesType} from '../../Redux/diologs-reducer';\r\nimport {maxLength150, maxLength30, requiredField} from '../../utils/validators/validators';\r\nimport {Input} from '../common/FormsControls/FormsControls';\r\n\r\ntype PropsType = {\r\n\r\n    dialogsPage: {\r\n        dialogs: DialogsType, messages: MessagesType, newMessageText: string\r\n    }\r\n    addMessage: (message: string) => void\r\n};\r\n\r\nexport const Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let dialogsItems = props.dialogsPage.dialogs.map(el =>\r\n        <DialogItem key={el.id} name={el.name} id={el.id} srs={el.srs}/>);\r\n\r\n    let messagesItems = props.dialogsPage.messages.map(el => <Message key={el.id} message={el.message}/>);\r\n\r\n\r\n    const onSubmit = (formDate: any) => {\r\n        console.log(formDate);\r\n        props.addMessage(formDate.newMessageBody);\r\n        formDate.newMessageBody = '';\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsWrapper}>\r\n                    <div className={s.dialogsItems}>\r\n                        {dialogsItems}\r\n                    </div>\r\n                    <div className={s.messages}>\r\n                        {messagesItems}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <div className={s.addForm}>\r\n                <AddMessageReduxForm onSubmit={onSubmit}/>\r\n                {/*<textarea value={props.dialogsPage.newMessageText} onChange={onMessageChange}*/}\r\n                {/*          style={{width: '827px', height: '58px'}} ref={newMessageElement}*/}\r\n                {/*          onKeyPress={OnClickEnter} placeholder={'Enter your message'}> </textarea>*/}\r\n                {/*<button onClick={addMessage}>Send</button>*/}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps> = (props) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.addForm}>\r\n                <Field component={Input} name={'newMessageBody'}\r\n                       placeholder={'Enter your message'} style={{width: '827px', height: '58px'}}\r\n                       validate={[requiredField, maxLength150]}/>\r\n                <button>Send</button>\r\n            </div>\r\n\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddMessageReduxForm = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\n\r\n// addMessage: (message: string) => void\r\n// updateNewMessageText: (message: string) => void\r\n// newMessageText:string\r\n\r\n\r\n// let newMessageElement = React.createRef<HTMLTextAreaElement>();\r\n// // const addMessage = () => {\r\n// //     let text = newMessageElement.current?.value;\r\n// //     if (text) {\r\n// //         props.addMessage();\r\n// //     }\r\n// // };\r\n// // const OnClickEnter = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n// //     if (e.key === 'Enter') {\r\n// //         addMessage();\r\n// //     }\r\n// // };","import React from 'react';\r\nimport {addMessage} from '../../Redux/diologs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../Redux/redux-store';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\n// type PropsType = {\r\n//     state: { dialogs: DialogsType, messages: MessagesType, newMessageText: string }\r\n//     dispatch: (action: ActionType) => void\r\n// }\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    addMessage\r\n}),WithAuthRedirect)(Dialogs)\r\n\r\n\r\n\r\n// export const DialogsContainer = WithAuthRedirect(connect(mapStateToProps, {\r\n//     addMessage,\r\n//     onMessageChange\r\n// })(Dialogs));\r\n\r\n\r\n// export const DialogsContainer: React.FC = (props) => {\r\n//\r\n//     // const addMessage = () => {\r\n//     //     const action = AddMessageTypeAC();\r\n//     //     props.dispatch(action);\r\n//     // };\r\n//     //\r\n//     // const onMessageChange = (text: string) => {\r\n//     //     const action = updateNewMessageTextTypeAC(text);\r\n//     //     props.dispatch(action);\r\n//     // };\r\n//     return (\r\n//         <StoreContext.Consumer>{(store) => {\r\n//             const addMessage = () => {\r\n//                 const action = AddMessageTypeAC();\r\n//                 store.dispatch(action);\r\n//             };\r\n//\r\n//             const onMessageChange = (text: string) => {\r\n//                 const action = updateNewMessageTextTypeAC(text);\r\n//                 store.dispatch(action);\r\n//             };\r\n//             return (\r\n//                 <Dialogs dialogs={store.getState().dialogsPage.dialogs} messages={store.getState().dialogsPage.messages}\r\n//                          newMessageText={store.getState().dialogsPage.newMessageText} addMessage={addMessage}\r\n//                          onMessageChange={onMessageChange}/>);\r\n//         }}\r\n//         </StoreContext.Consumer>\r\n//     );\r\n// };\r\n"],"names":["DialogItem","props","className","s","activeClassName","to","id","name","src","srs","width","height","Message","message","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Input","placeholder","style","validate","requiredField","maxLength150","compose","connect","state","dialogsPage","addMessage","WithAuthRedirect","dialogsItems","dialogs","map","el","messagesItems","messages","formDate","console","log","newMessageBody"],"sourceRoot":""}