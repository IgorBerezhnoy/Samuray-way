{"version":3,"file":"static/js/692.482e110a.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileStatusWithHook/ProfileStatus.module.css?b627","components/Profile/ProfileInfo/ProfileStatusWithHook/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/UserInfo/ContactItem.tsx","components/Profile/ProfileInfo/UserInfo/UserContacts.tsx","components/Profile/ProfileInfo/UserInfo/UserInfo.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/UserInfo/UserInfoForm/UserInfoForm.module.css?eb4a","components/Profile/ProfileInfo/UserInfo/UserInfoForm/UserInfoForm.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/HeaderProfile/HeaderProfile.module.css?6e17","webpack://samurai-way/./src/components/Profile/ProfileInfo/HeaderProfile/PostsFollowersBlock/PostsFollowersBlock.module.css?0420","components/Profile/ProfileInfo/HeaderProfile/PostsFollowersBlock/PostsFollowersBlock.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/HeaderProfile/UserName/UserName.module.css?17d7","components/Profile/ProfileInfo/HeaderProfile/UserName/UserName.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/HeaderProfile/ButtonsBarProfile/ButtonsBarProfile.module.css?38f6","components/Profile/ProfileInfo/HeaderProfile/ButtonsBarProfile/ButtonsBarProfile.tsx","components/Profile/ProfileInfo/HeaderProfile/HeaderProfile.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/AddPostForm/AddPostForm.module.css?7b47","webpack://samurai-way/./src/components/Profile/MyPosts/AddPostForm/InputForPost.module.css?6858","components/Profile/MyPosts/AddPostForm/InputForPost.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__8sqKX\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileStatus.module.css'\r\n\r\ntype PropsType = {\r\n  status: string,\r\n  updateStatusTC: (status: string) => void\r\n  isOwner: boolean\r\n  name: string\r\n}\r\n\r\nexport const ProfileStatusWithHook: React.FC<PropsType> = (props) => {\r\n  let [editMode, setEditMode] = useState<boolean>(false);\r\n  let [value, setValue] = useState<string>(props.status);\r\n  let [error, setError] = useState<string | null>(null);\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.currentTarget.value);\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n  };\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    if (value.length <= 300) {\r\n      setEditMode(false);\r\n      props.updateStatusTC(value);\r\n    } else {\r\n      setError('Value is too long');\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setValue(props.status);\r\n  }, [props.status]);\r\n  return (\r\n    props.isOwner ? <div>\r\n        {editMode\r\n          ? <div><input className={s.status} autoFocus onBlur={deactivateEditMode} onChange={onStatusChange}\r\n                        value={value}></input></div>\r\n          : <div className={s.status}><b>My status: </b><abbr   data-title={\"Double click for change\"}\r\n            onDoubleClick={activateEditMode}>{value ? value : <> I don't have status</>}</abbr>\r\n          </div>\r\n        }\r\n        {error && <div style={{color: 'red'}}>{error}</div>}\r\n      </div>\r\n      : <div><b>My status: </b><span>{value ? value : 'Здесь бы мог быть статус ' + props.name}</span>\r\n      </div>\r\n  );\r\n\r\n};\r\n\r\n//     let [editMode,setEditMode]=useState<boolean>(false)\r\n//\r\n//\r\n// let onDoubleClickHandler=()=>{\r\n//         setEditMode(true)\r\n// }\r\n","import {Field} from 'redux-form';\r\nimport {Input} from '../../../common';\r\nimport React from 'react';\r\nimport {validateWebsiteLink} from '../../../../utils/validators/validators';\r\n\r\ntype PropsType = { contactKey: string, contactValue?: string | null, formMode?: boolean, };\r\nexport const ContactItem:React.FC<PropsType> = ({formMode=false,...props}) => {\r\n    if (formMode){\r\n        return (<tr>\r\n            <td><b>{props.contactKey}:</b></td>\r\n            <td><Field component={Input} name={props.contactKey} placeholder={props.contactKey}\r\n                       validate={[validateWebsiteLink]}/></td>\r\n\r\n        </tr>);\r\n    }else {\r\n        return (<div>\r\n            {props.contactValue && <div><b>{props.contactKey}:</b>{props.contactValue}</div>}\r\n        </div>)\r\n    }\r\n};","import {ProfileType} from '../../../../Redux/profile-reducer';\r\nimport React from 'react';\r\nimport {Field} from 'redux-form';\r\nimport {Input} from '../../../common';\r\nimport {ContactItem} from './ContactItem';\r\n\r\nexport const UserContacts = (props: { profile: ProfileType }) => {\r\n    const conKey = Object.keys(props.profile.contacts);\r\n    const conVal = Object.values(props.profile.contacts);\r\n    let contacts = [];\r\n    for (let i = 0; i < conKey.length; i++) {\r\n        contacts.push(\r\n            <ContactItem contactKey={conKey[i]} contactValue={conVal[i]}/>\r\n        );\r\n    }\r\n\r\n    return (<div><b>contacts:</b>\r\n        {\r\n            (conVal.filter(el=>el!==null).length)\r\n                ?\r\n                <div>\r\n                    {contacts}\r\n                </div>\r\n\r\n                : <> I don't have contacts</>\r\n\r\n\r\n        }\r\n    </div>);\r\n};","import {ProfileStatusWithHook} from '../ProfileStatusWithHook/ProfileStatusWithHook';\r\nimport React from 'react';\r\nimport {ProfileType} from '../../../../Redux/profile-reducer';\r\nimport {UserContacts} from './UserContacts';\r\nimport s from \"./../ProfileInfo.module.css\"\r\ntype PropsType = {\r\n  profile: ProfileType\r\n  status: string\r\n  isOwner: boolean\r\n  updateStatusTC: (status: string) => void\r\n}\r\nexport const UserInfo = (props: PropsType) => {\r\n\r\n  return (<>\r\n    <div>\r\n      {/*{props.profile.fullName && <div><b>FullName:</b> {props.profile.fullName}</div>}*/}\r\n      <h3>About</h3>\r\n      {props.profile.lookingForAJobDescription &&\r\n          <div><b>lookingForAJobDescription:</b> {props.profile.lookingForAJobDescription}</div>}\r\n\r\n      <ProfileStatusWithHook status={props.status} updateStatusTC={props.updateStatusTC}\r\n                             isOwner={props.isOwner} name={props.profile.fullName}/>\r\n\r\n      {props.profile.aboutMe && <div><b>AboutMe:</b> {props.profile.aboutMe}</div>}\r\n    </div>\r\n\r\n    <UserContacts profile={props.profile}/>\r\n\r\n\r\n  </>);\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formSummaryError\":\"UserInfoForm_formSummaryError__ujCwY\",\"tableStyle\":\"UserInfoForm_tableStyle__0zhO1\"};","import {ProfileStatusWithHook} from '../../ProfileStatusWithHook/ProfileStatusWithHook';\r\nimport React, {ChangeEvent} from 'react';\r\nimport {ProfileType} from '../../../../../Redux/profile-reducer';\r\nimport {Input} from '../../../../common';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {UserInfo} from '../UserInfo';\r\nimport {ContactItem} from '../ContactItem';\r\nimport {maxLength150, requiredField} from '../../../../../utils/validators/validators';\r\nimport s from './UserInfoForm.module.css'\r\nimport {Button} from '../../../../common/Button/Button';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n  status: string\r\n  isOwner: boolean\r\n  editMode: boolean\r\n  updateStatusTC: (status: string) => void\r\n  setEditMode: (isActive: boolean) => void\r\n  onMainPhotoSelected: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const UserInfoForm: React.FC<InjectedFormProps<formDateType, PropsType> & PropsType> = (props) => {\r\n\r\n  const conKey = Object.keys(props.profile.contacts);\r\n\r\n  let contacts = [];\r\n\r\n  for (let i = 0; i < conKey.length; i++) {\r\n    contacts.push(<ContactItem key={i} contactKey={conKey[i]} formMode={true}/>);\r\n  }\r\n\r\n  if (!props.editMode) {\r\n    return <div>\r\n      <UserInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC}\r\n                isOwner={props.isOwner}/></div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n\r\n          {props.isOwner && <table className={s.tableStyle}>\r\n              <tr>\r\n                  <td><b>Update photo</b></td>\r\n                  <td><input type={'file'} onChange={props.onMainPhotoSelected}/></td>\r\n              </tr>\r\n\r\n              <tr>\r\n                  <td ><b>FullName:</b></td>\r\n                  <td><Field component={Input} name={'fullName'} validate={[requiredField]}\r\n                             placeholder={'fullName'}/></td>\r\n              </tr>\r\n\r\n              <tr>\r\n                  <td><b>Looking for a job:</b></td>\r\n                  <td><Field component={'input'} name={'lookingForAJob'} placeholder={'lookingForAJob'}\r\n                             type={'checkbox'}/></td>\r\n              </tr>\r\n              <tr>\r\n                  <td><b>Looking for a Description:</b></td>\r\n                  <td><Field component={Input} name={'lookingForAJobDescription'}\r\n                             validate={[maxLength150, requiredField]}\r\n                             placeholder={'lookingForAJobDescription'}/></td>\r\n              </tr>\r\n\r\n              <tr>\r\n                  <td><b>About me:</b></td>\r\n                  <td><Field component={Input} name={'aboutMe'} validate={[maxLength150]} placeholder={'About me'}/>\r\n                  </td>\r\n              </tr>\r\n          </table>}\r\n\r\n          {/*<ProfileStatusWithHook status={props.status} updateStatusTC={props.updateStatusTC}*/}\r\n          {/*                       isOwner={props.isOwner} name={props.profile.fullName}/>*/}\r\n        </div>\r\n        {props.error && <div className={s.formSummaryError}> {props.error}</div>}\r\n\r\n        <table className={s.tableStyle}>{contacts}</table>\r\n\r\n        <Button name=\"save\" callBack={() => {\r\n        }} color={'green'} size={'medium'}/>\r\n      </form>\r\n    </div>);\r\n};\r\n\r\nexport const UserInfoReduxForm = reduxForm<formDateType, PropsType>({form: 'userInfoForm'})(UserInfoForm);\r\n\r\n\r\ntype formDateType = {\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n  fullName: string\r\n  github: string\r\n  vk: string\r\n  facebook: string\r\n  instagram: string\r\n  twitter: string\r\n  website: string\r\n  youtube: string\r\n  mainLink: string\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"HeaderProfile_wrapper__oedV7\",\"imgBackgrounds\":\"HeaderProfile_imgBackgrounds__-Dmjp\",\"imgMain\":\"HeaderProfile_imgMain__4Sy9Q\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PostsFollowersBlock_wrapper__NdZki\",\"item\":\"PostsFollowersBlock_item__klN9T\",\"number\":\"PostsFollowersBlock_number__PUm-E\",\"littleText\":\"PostsFollowersBlock_littleText__0ZY9S\"};","import React from 'react';\r\nimport s from './PostsFollowersBlock.module.css';\r\n\r\ntype PropsType = {\r\n  posts: number\r\n  followers: string\r\n  follow: string\r\n}\r\nexport const PostsFollowersBlock = (props: PropsType) => {\r\n\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <div className={s.item}><span className={s.number} >{props.posts }</span> <span className={s.littleText}>Posts</span></div>\r\n      <div className={s.item}><span className={s.number}>{props.followers }</span> <span className={s.littleText}>Followers</span></div>\r\n      <div className={s.item}><span className={s.number}>{props.follow }</span> <span className={s.littleText}>Follow</span></div>\r\n    </div>\r\n  );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"UserName_wrapper__ql1Mm\",\"fullName\":\"UserName_fullName__J2R3Z\",\"nickname\":\"UserName_nickname__UlO87\"};","import React from 'react';\r\nimport s from \"./UserName.module.css\"\r\ntype PropsType = {\r\n  fullName: string\r\n  nickname: string\r\n}\r\nexport const UserName: React.FC<PropsType> = ({fullName, nickname}) => {\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <div className={s.fullName}><h2>{fullName}</h2></div>\r\n      <div className={s.nickname}>{nickname}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ButtonsBarProfile_wrapper__4T7qe\"};","import React from 'react';\r\nimport s from './ButtonsBarProfile.module.css';\r\nimport {Button, ButtonPropsType} from '../../../../common/Button/Button';\r\n\r\ntype PropsType = ButtonPropsType\r\nexport const ButtonsBarProfile = (props: PropsType) => {\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <Button disabled={props.disabled} name={props.name} color={props.color} callBack={props.callBack} size={'large'}/>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n","import {ProfileType} from '../../../../Redux/profile-reducer';\r\nimport s from './HeaderProfile.module.css';\r\nimport {PostsFollowersBlock} from './PostsFollowersBlock/PostsFollowersBlock';\r\nimport {UserName} from './UserName/UserName';\r\nimport React, {useState} from 'react';\r\nimport {Preloader} from '../../../common';\r\nimport {ButtonsBarProfile} from './ButtonsBarProfile/ButtonsBarProfile';\r\n\r\ntype PropsTypeHeader = {\r\n  randomBackground: string,\r\n  profile: ProfileType | null,\r\n  setEditMode: (status: boolean) => void\r\n  editMode: boolean\r\n  isOwner: boolean\r\n  postsLeng: number\r\n}\r\nexport const HeaderProfile = (props: PropsTypeHeader) => {\r\n  const setEditModeHandler = () => props.setEditMode(!props.editMode);\r\n\r\n  let [disabled, setDisabled] = useState<boolean>(false);\r\n  let [followed, setFollowed] = useState<boolean>(false);\r\n  if (!!props.profile) {\r\n    const onClickHandler = async () => {\r\n      if (!disabled){\r\n        setDisabled(true);\r\n        await setTimeout(() => {\r\n          setFollowed(!followed);\r\n        setDisabled(false);\r\n        }, 2000);\r\n      }\r\n\r\n    };\r\n    return (\r\n      <div className={'headerProfile'}>\r\n        <div className={s.wrapper}>\r\n          <img className={s.imgBackgrounds} src={props.randomBackground}/>\r\n          <img className={s.imgMain}\r\n               src={props.profile.photos.large ? props.profile.photos.large : `${process.env.PUBLIC_URL}/img/user5.png`}\r\n               width={'200px'}/>\r\n          <PostsFollowersBlock posts={props.postsLeng} followers={'2.1k'} follow={'32k'}/>\r\n          <UserName fullName={props.profile.fullName} nickname={'@' + props.profile.fullName}/>\r\n          {props.isOwner\r\n            ? <ButtonsBarProfile callBack={setEditModeHandler} color={props.editMode ? 'red' : 'green'}\r\n                                 name={props.editMode ? 'cancel' : 'edit'}/>\r\n            : <div>\r\n              < ButtonsBarProfile disabled={disabled}\r\n                                  color={followed ? 'red' : 'green' }\r\n                                  callBack={onClickHandler} name={followed ? 'Unfollow' : 'Follow'}/>\r\n            </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Preloader/>;\r\n  }\r\n};","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from '../../../Redux/profile-reducer';\r\nimport {UserInfo} from './UserInfo/UserInfo';\r\nimport {Preloader} from '../../common';\r\nimport {UserInfoReduxForm} from './UserInfo/UserInfoForm/UserInfoForm';\r\nimport {formDateDomainType} from '../../../api/Api';\r\nimport {HeaderProfile} from './HeaderProfile/HeaderProfile';\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = (props) => {\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  let randomBackground = props.backgrounds[5];\r\n  // let randomBackground = props.backgrounds[Math.floor(props.backgrounds.length * Math.random())];\r\n\r\n  if (!!props.profile) {\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n      if (e.target.files?.length) {\r\n        props.savePhoto(e.target.files[0]);\r\n      }\r\n    };\r\n    const onSubmit = async (formDate: any) => {\r\n      let data: formDateDomainType = {\r\n        userId: props.myId!.toString(),\r\n        fullName: formDate.fullName as string,\r\n        aboutMe: formDate.aboutMe,\r\n        lookingForAJob: formDate.lookingForAJob as boolean,\r\n        lookingForAJobDescription: formDate.lookingForAJobDescription as string,\r\n        contacts: {\r\n          github: formDate.github,\r\n          mainLink: formDate.mainLink,\r\n          website: formDate.website,\r\n          facebook: formDate.facebook,\r\n          instagram: formDate.instagram,\r\n          twitter: formDate.twitter,\r\n          youtube: formDate.youtube,\r\n          vk: formDate.vk\r\n        }\r\n      };\r\n      let res = await props.updateProfileInfoTC(data);\r\n      if (res.data.resultCode === 0) {\r\n        setEditMode(false);\r\n      }\r\n    };\r\n\r\n    return <>\r\n\r\n      <HeaderProfile profile={props.profile} setEditMode={setEditMode} editMode={editMode}\r\n                     randomBackground={randomBackground} isOwner={props.isOwner} postsLeng={props.postsLeng}/>\r\n      <div className={s.descriptionBlock}>\r\n\r\n        {props.isOwner\r\n          ? <UserInfoReduxForm profile={props.profile} initialValues={props.profile} status={props.status}\r\n                               updateStatusTC={props.updateStatusTC}\r\n                               isOwner={props.isOwner} onSubmit={onSubmit} setEditMode={setEditMode}\r\n                               editMode={editMode} onMainPhotoSelected={onMainPhotoSelected}/>\r\n          : <UserInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC}\r\n                      isOwner={props.isOwner}/>\r\n        }\r\n\r\n      </div>\r\n    </>;\r\n\r\n  } else {\r\n    return <Preloader/>;\r\n  }\r\n};\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null, status: string,\r\n  updateStatusTC: (status: string) => void,\r\n  myId: number | null, isOwner: boolean, savePhoto: (file: File) => void\r\n  updateProfileInfoTC: (profileInfo: formDateDomainType) => any\r\n  backgrounds: string[]\r\n  postsLeng: number\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__I7u66\",\"posts\":\"MyPosts_posts__84rU-\",\"header\":\"MyPosts_header__tcCad\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Ury9y\",\"photoAndNameBlock\":\"Post_photoAndNameBlock__+Vs1n\",\"NameAndTimeBlock\":\"Post_NameAndTimeBlock__e1AQR\",\"userName\":\"Post_userName__cJx4L\",\"timeAgo\":\"Post_timeAgo__uZiHE\",\"postText\":\"Post_postText__8qhbn\",\"userPhoto\":\"Post_userPhoto__LIeSo\",\"likeImg\":\"Post_likeImg__JPkq+\",\"likedImh\":\"Post_likedImh__vaSd1\",\"postFooter\":\"Post_postFooter__m2JAL\",\"likeImgAndCount\":\"Post_likeImgAndCount__m4FrZ\",\"likeCount\":\"Post_likeCount__xq8j8\",\"commentCount\":\"Post_commentCount__vLHxB\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostType} from '../../../../Redux/profile-reducer';\r\n\r\ntype PropsType = {\r\n  post: PostType\r\n  photo: string,\r\n  userName?: string\r\n  addOrRemoveLike: (postId: number) => void\r\n}\r\n\r\nexport const Post: React.FC<PropsType> = (props) => {\r\n\r\n  const onClickLikeHandler = () => props.addOrRemoveLike(props.post.id);\r\n  return (\r\n    <div className={s.item}>\r\n      <div className={s.photoAndNameBlock}>\r\n        <div><img className={s.userPhoto} src={props.photo ? props.photo : `${process.env.PUBLIC_URL}/img/user5.png`}/>\r\n        </div>\r\n        <div className={s.NameAndTimeBlock}>\r\n          <div className={s.userName}>{props.userName}</div>\r\n          <div className={s.timeAgo}>{props.post.timeAgo}</div>\r\n        </div>\r\n      </div>\r\n      <div className={s.postText}>{props.post.postText}</div>\r\n      <div className={s.postFooter}>\r\n        <div className={s.likeImgAndCount}>\r\n          <img className={`${s.likeImg} ${props.post.isLiked && s.likedImh}`}\r\n               src={`${process.env.PUBLIC_URL}/img/icons/like2.png`}\r\n               onClick={onClickLikeHandler}/>\r\n          <span className={s.likeCount}>{props.post.like}</span>\r\n        </div>\r\n        <div><span className={s.commentCount}>0 Comment</span></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"InputForPost_formControl__Eb9b4\",\"formControlError\":\"InputForPost_formControlError__Oi5M6\",\"spanFormControlError\":\"InputForPost_spanFormControlError__fgz+l\",\"form\":\"InputForPost_form__Jg12G\"};","import React from 'react';\r\nimport s from './InputForPost.module.css';\r\nimport {Button} from '../../../common/Button/Button';\r\n\r\ntype InputPropsType = {\r\n  input: any, meta: { error: string, touched: boolean }\r\n  isCustom?: boolean\r\n};\r\n\r\nexport const InputForPost = ({input, meta, ...props}: InputPropsType) => {\r\n  const isError = meta.touched && meta.error;\r\n\r\n\r\n  return (<>\r\n    <div className={s.form}><input\r\n\r\n      className={s.formControl + ' ' + (isError ? s.formControlError : '')}\r\n      {...props} {...input} {...meta} />\r\n      <Button name={'Add post'}  size={'large'} callBack={() => {\r\n      }} color={'blue'}/></div>\r\n\r\n    <div>{isError && <div className={s.spanFormControlError}>{meta.error}</div>}</div>\r\n  </>)\r\n};","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport React from 'react';\r\nimport {maxLengthCreator150} from '../../../../utils/validators/validators';\r\nimport s from './AddPostForm.module.css';\r\nimport {InputForPost} from './InputForPost';\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps> = (props) => {\r\n\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={s.form}>\r\n        <Field component={InputForPost} name={'newPostBody'} placeholder={'Enter your post'}\r\n               validate={[maxLengthCreator150]}/>\r\n        {/*<Button name={\"Add post\"} size={\"large\"} callBack={()=>{}} color={\"blue\"}/>*/}\r\n      </div>\r\n\r\n    </form>\r\n  );\r\n};\r\nexport const AddPostReduxForm = reduxForm({form: 'MyPostsAddMessageForm'})(AddPostForm);","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from './Post/Post';\r\nimport {MyPostContainerPropsType} from './MyPostsContainer';\r\nimport {AddPostReduxForm} from './AddPostForm/AddPostForm';\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostContainerPropsType) => {\r\n\r\n  let postsItems = props.posts.map(el =>\r\n    <Post key={el.id} post={el} photo={props.photo?.small!} userName={props.userName} addOrRemoveLike={props.addOrRemoveLike}/>);\r\n\r\n  const onSubmit = (formDate: any) => {\r\n    if (formDate.newPostBody.trim()) {\r\n      props.addPost(formDate.newPostBody);\r\n      formDate.newPostBody = '';\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n\r\n      <div className={s.header}><h3>My post</h3>\r\n        <div>\r\n          <AddPostReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n      </div>\r\n      <div className={s.posts}>\r\n        <div>{postsItems}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n});\r\n\r\n\r\n// const OnClickEnter = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n//     if (e.key === 'Enter') {\r\n//         addPost();\r\n//     }\r\n// };\r\n//\r\n// const onPostChange = () => {\r\n//     debugger\r\n//     let text = newPostElement.current?.value;\r\n//     if (text) {\r\n//         // const action: ActionType = updateNewPostTextTypeAC(text);\r\n//         // props.dispatch(action);\r\n//         this.props.updateNewPostText(text);\r\n//     }\r\n// };\r\n\r\n//\r\n// let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n// const addPost = () => {\r\n//\r\n//\r\n//     let text = newPostElement.current?.value;\r\n//     if (text) {\r\n//         // const action = AddPostActionCreator();\r\n//         // props.dispatch(action);\r\n//         this.props.addPost();\r\n//     }\r\n\r\n// };","import {addOrRemoveLike, addPost, PhotoDomainType, PostType} from '../../../Redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {MyPosts} from './MyPosts';\r\nimport {AppRootStateType} from '../../../Redux/redux-store';\r\n\r\n\r\nexport type MyPostContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype mapStateToPropsType = { posts: PostType[], photo: PhotoDomainType | undefined, userName: string | undefined }\r\ntype mapDispatchToPropsType = {\r\n  addPost: (post: string) => void,\r\n  addOrRemoveLike:(postId: number)=>void\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\r\n\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    photo: state.profilePage.profile?.photos,\r\n    userName: state.profilePage.profile?.fullName\r\n  };\r\n};\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n  addPost,\r\n  addOrRemoveLike\r\n})(MyPosts);\r\n\r\n\r\n// type PropsType = {\r\n//     state: { posts: PostsType, newPostText: string }\r\n//     dispatch: (action: ActionType) => void\r\n// }\r\n\r\n//\r\n//\r\n// export const MyPostsContainer: React.FC = (props) => {\r\n\r\n// const addPost = () => {\r\n//     const action = AddPostActionCreator();\r\n//     props.dispatch(action);\r\n//\r\n// };\r\n//\r\n//\r\n// const onPostChange = (text: string) => {\r\n//     const action: ActionType = updateNewPostTextTypeAC(text);\r\n//     props.dispatch(action);\r\n//\r\n// };\r\n\r\n//     return (\r\n//         <StoreContext.Consumer>{\r\n//             (store)=> {\r\n//                 const addPost = () => {\r\n//                     const action = AddPostActionCreator();\r\n//                     store.dispatch(action);\r\n//\r\n//                 };\r\n//\r\n//\r\n//                 const onPostChange = (text: string) => {\r\n//                     const action: ActionType = updateNewPostTextTypeAC(text);\r\n//                     store.dispatch(action);\r\n//\r\n//                 };\r\n//\r\n//                 return (\r\n//                     <MyPosts posts={store.getState().profilePage.posts}\r\n//                              newPostText={store.getState().profilePage.newPostText}\r\n//                              updateNewPostText={onPostChange}\r\n//                              addPost={addPost}/>);\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n//\r\n//     );\r\n// };\r\n//","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileContainerPropsType} from './ProfileContainer';\r\nimport {Preloader} from '../common';\r\n\r\n//\r\ntype PropsType = ProfileContainerPropsType & { isOwner: boolean }\r\n\r\nexport const Profile: React.FC<PropsType> = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={s.content}>\r\n\r\n            {props.profile ?\r\n                <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC}\r\n                             isOwner={props.isOwner} savePhoto={props.savePhoto}\r\n                             myId={props.myId} updateProfileInfoTC={props.updateProfileInfoTC}\r\n                             backgrounds={props.backgrounds} postsLeng={props.postsLeng}\r\n              /> :\r\n                <Preloader/>}\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    ProfileType,\r\n    savePhoto,\r\n    setUserProfileTC,\r\n    setUserStatusTC,\r\n    updateProfileInfoTC,\r\n    updateStatusTC\r\n} from '../../Redux/profile-reducer';\r\nimport {AppRootStateType} from '../../Redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc';\r\nimport {formDateDomainType} from '../../api/Api';\r\n\r\n\r\nclass ProfileContainerAPI extends React.Component<CommonPropsType> {\r\n\r\n    onUpdateComponent() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.myId!.toString();\r\n        }\r\n        this.props.setUserProfileTC(userId);\r\n        this.props.setUserStatusTC(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onUpdateComponent();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: any) {\r\n        console.log('updateProps', prevProps, prevState);\r\n\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n\r\n            this.onUpdateComponent();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatusTC={this.props.updateStatusTC} isOwner={this.props.myId == this.props.id}\r\n                     savePhoto={this.props.savePhoto} myId={this.props.myId} updateProfileInfoTC={this.props.updateProfileInfoTC}\r\n                     backgrounds={this.props.backgrounds} postsLeng={this.props.postsLeng}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        id: state.profilePage.profile?.userId,\r\n        myId: state.authMe.id,\r\n        backgrounds:state.profilePage.backgrounds,\r\n        postsLeng:state.profilePage.posts.length\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n        {setUserStatusTC, setUserProfileTC, updateStatusTC, savePhoto, updateProfileInfoTC}), withRouter, WithAuthRedirect\r\n    // ,WithAuthRedirect\r\n)(ProfileContainerAPI);\r\n\r\nexport type ProfileContainerPropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\ntype PathParamsType = { userId: string }\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    postsLeng:number\r\n    profile: ProfileType | null,\r\n    status: string\r\n    id?: number | null | string\r\n    myId: number | null\r\n    backgrounds:string[]\r\n\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setUserProfileAC: (profile: ProfileType) => void, setUserProfileTC: (userId: string) => void,\r\n    setUserStatusTC: (userId: string) => void, updateStatusTC: (status: string) => void,\r\n    savePhoto: (event: File) => void, updateProfileInfoTC:(profileInfo: formDateDomainType)=>void\r\n}\r\n\r\n\r\n//\r\n// export default  WithAuthRedirect(withRouter(connect(mapStateToProps,\r\n//     {setUserProfileAC, setUserProfileTC})(ProfileContainerAPI)));\r\n\r\n//\r\n// let withURLDataContainerComponent = withRouter(ProfileContainerAPI);\r\n//\r\n// export default  WithAuthRedirect(connect(mapStateToProps,\r\n//     {setUserProfileAC, setUserProfileTC})(withURLDataContainerComponent));\r\n\r\n\r\n// let withURLDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n// export default compose<FC>(connect(mapStateToProps,\r\n//     {setUserProfileAC, setUserProfileTC}), WithAuthRedirect, withRouter) (ProfileContainerAPI);\r\n"],"names":["ProfileStatusWithHook","props","useState","editMode","setEditMode","status","value","setValue","error","setError","useEffect","isOwner","className","s","autoFocus","onBlur","length","updateStatusTC","onChange","e","currentTarget","onDoubleClick","style","color","name","ContactItem","formMode","contactKey","Field","component","Input","placeholder","validate","validateWebsiteLink","contactValue","UserContacts","conKey","Object","keys","profile","contacts","conVal","values","i","push","filter","el","UserInfo","lookingForAJobDescription","fullName","aboutMe","UserInfoReduxForm","reduxForm","form","onSubmit","handleSubmit","type","onMainPhotoSelected","requiredField","maxLength150","Button","callBack","size","PostsFollowersBlock","posts","followers","follow","UserName","nickname","ButtonsBarProfile","disabled","HeaderProfile","setDisabled","followed","setFollowed","onClickHandler","setTimeout","src","randomBackground","photos","large","process","width","postsLeng","ProfileInfo","backgrounds","formDate","data","userId","myId","toString","lookingForAJob","github","mainLink","website","facebook","instagram","twitter","youtube","vk","updateProfileInfoTC","resultCode","initialValues","target","files","savePhoto","Post","photo","userName","post","timeAgo","postText","isLiked","onClick","addOrRemoveLike","id","like","InputForPost","input","meta","isError","touched","AddPostReduxForm","maxLengthCreator150","MyPosts","React","postsItems","map","small","newPostBody","trim","addPost","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainerAPI","this","match","params","setUserProfileTC","setUserStatusTC","onUpdateComponent","prevProps","prevState","console","log","compose","authMe","withRouter","WithAuthRedirect"],"sourceRoot":""}