{"version":3,"file":"static/js/50.e158d696.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHook/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__8sqKX\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string,\r\n    updateStatusTC: (status: string) => void\r\n    isOwner: boolean\r\n    name: string\r\n}\r\n\r\nexport const ProfileStatusWithHook: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [value, setValue] = useState<string>(props.status);\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value);\r\n    };\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const deactivateEditMode = () => {\r\n\r\n        setEditMode(false);\r\n        props.updateStatusTC(value);\r\n    };\r\n    useEffect(() => {\r\n        setValue(props.status);\r\n    }, [props.status]);\r\n    return (\r\n        props.isOwner ? <div>\r\n                {editMode\r\n                    ? <div><input autoFocus onBlur={deactivateEditMode} onChange={onStatusChange}\r\n                                  value={value}></input></div>\r\n                    : <div><span\r\n                        onDoubleClick={activateEditMode}>{value ? value : 'Your status'}</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n            : <div><span>{value ? value : \"Здесь бы мог быть статус \"+props.name}</span>\r\n            </div>\r\n    );\r\n\r\n};\r\n\r\n//     let [editMode,setEditMode]=useState<boolean>(false)\r\n//\r\n//\r\n// let onDoubleClickHandler=()=>{\r\n//         setEditMode(true)\r\n// }\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from '../../../Redux/profile-reducer';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHook} from './ProfileStatusWithHook/ProfileStatusWithHook';\r\n\r\ntype PropsType = { profile: ProfileType | null, status: string, updateStatusTC: (status: string) => void, isOwner: boolean , savePhoto:(file:File)=>void}\r\nexport const ProfileInfo: React.FC<PropsType> = (props) => {\r\n\r\n    if (!!props.profile) {\r\n        const onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>)=>{\r\n           if ( e.target.files?.length){\r\n               debugger\r\n              props.savePhoto( e.target.files[0])\r\n           }\r\n\r\n        };\r\n        return <>\r\n            <div><img src={`${process.env.PUBLIC_URL}/img/fon.jpg`}/></div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={props.profile.photos.large ? props.profile.photos.large : `${process.env.PUBLIC_URL}/img/user5.png`}\r\n                    width={'200px'}/>\r\n                {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                <div>\r\n                    {props.profile.fullName && <div>FullName: {props.profile.fullName}</div>}\r\n                    {props.profile.aboutMe && <div>aboutMe: {props.profile.aboutMe}</div>}\r\n                    <ProfileStatusWithHook status={props.status} updateStatusTC={props.updateStatusTC}\r\n                                           isOwner={props.isOwner} name={props.profile.fullName}/>\r\n\r\n                    <div>contacts:</div>\r\n                    {props.profile.contacts.vk && <div>vk:{props.profile.contacts.vk}</div>}\r\n                    {props.profile.contacts.twitter && <div>twitter:{props.profile.contacts.twitter}</div>}\r\n                    {props.profile.contacts.instagram && <div>instagram: {props.profile.contacts.instagram}</div>}\r\n                    {props.profile.contacts.github && <div>github: {props.profile.contacts.github}</div>}\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </>;\r\n    } else {\r\n        return <Preloader/>;\r\n    }\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__I7u66\",\"posts\":\"MyPosts_posts__84rU-\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Ury9y\",\"active\":\"Post_active__IvPWP\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    like:number\r\n    photo:string\r\n}\r\n\r\nexport const Post:React.FC<PropsType>=(props)=> {\r\n    return (\r\n        <div className={s.item}><img src={props.photo}/>{props.message}\r\n            <div><span>like: {props.like}</span></div>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from './Post/Post';\r\nimport {MyPostContainerPropsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLength30, requiredField} from '../../../utils/validators/validators';\r\nimport {Input} from '../../common/FormsControls/FormsControls';\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostContainerPropsType) => {\r\n\r\n    let postsItems = props.posts.map(el =>\r\n        <Post key={el.id} message={el.message} like={el.like} photo={props.photo?.small!}/>);\r\n\r\n    const onSubmit = (formDate: any) => {props.addPost(formDate.newPostBody);\r\n        formDate.newPostBody = '';\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n\r\n            <h3>My post</h3>\r\n            <div>\r\n                <AddPostReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                <div>{postsItems}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n});\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps> = (props) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Input} name={'newPostBody'} placeholder={'Enter your post'}\r\n                       validate={[requiredField, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddPostReduxForm = reduxForm({form: 'MyPostsAddMessageForm'})(AddPostForm);\r\n\r\n\r\n// const OnClickEnter = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n//     if (e.key === 'Enter') {\r\n//         addPost();\r\n//     }\r\n// };\r\n//\r\n// const onPostChange = () => {\r\n//     debugger\r\n//     let text = newPostElement.current?.value;\r\n//     if (text) {\r\n//         // const action: ActionType = updateNewPostTextTypeAC(text);\r\n//         // props.dispatch(action);\r\n//         this.props.updateNewPostText(text);\r\n//     }\r\n// };\r\n\r\n//\r\n// let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n// const addPost = () => {\r\n//\r\n//\r\n//     let text = newPostElement.current?.value;\r\n//     if (text) {\r\n//         // const action = AddPostActionCreator();\r\n//         // props.dispatch(action);\r\n//         this.props.addPost();\r\n//     }\r\n\r\n// };","import React from 'react';\r\nimport {addPost, PhotoDomainType, PostType} from '../../../Redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {MyPosts} from './MyPosts';\r\nimport {AppRootStateType} from '../../../Redux/redux-store';\r\n\r\n\r\nexport type MyPostContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype mapStateToPropsType = { posts: PostType[], photo:PhotoDomainType|undefined }\r\ntype mapDispatchToPropsType = {\r\n    addPost: (post: string) => void,\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\r\n\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        photo:state.profilePage.profile?.photos\r\n    };\r\n};\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost\r\n})(MyPosts);\r\n\r\n\r\n\r\n// type PropsType = {\r\n//     state: { posts: PostsType, newPostText: string }\r\n//     dispatch: (action: ActionType) => void\r\n// }\r\n\r\n//\r\n//\r\n// export const MyPostsContainer: React.FC = (props) => {\r\n\r\n// const addPost = () => {\r\n//     const action = AddPostActionCreator();\r\n//     props.dispatch(action);\r\n//\r\n// };\r\n//\r\n//\r\n// const onPostChange = (text: string) => {\r\n//     const action: ActionType = updateNewPostTextTypeAC(text);\r\n//     props.dispatch(action);\r\n//\r\n// };\r\n\r\n//     return (\r\n//         <StoreContext.Consumer>{\r\n//             (store)=> {\r\n//                 const addPost = () => {\r\n//                     const action = AddPostActionCreator();\r\n//                     store.dispatch(action);\r\n//\r\n//                 };\r\n//\r\n//\r\n//                 const onPostChange = (text: string) => {\r\n//                     const action: ActionType = updateNewPostTextTypeAC(text);\r\n//                     store.dispatch(action);\r\n//\r\n//                 };\r\n//\r\n//                 return (\r\n//                     <MyPosts posts={store.getState().profilePage.posts}\r\n//                              newPostText={store.getState().profilePage.newPostText}\r\n//                              updateNewPostText={onPostChange}\r\n//                              addPost={addPost}/>);\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n//\r\n//     );\r\n// };\r\n//","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport {ProfileContainerPropsType} from './ProfileContainer';\r\n\r\n//\r\ntype PropsType = ProfileContainerPropsType & { isOwner: boolean }\r\n\r\nexport const Profile: React.FC<PropsType> = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={s.content}>\r\n\r\n            {props.profile ?\r\n                <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC} isOwner={props.isOwner} savePhoto={props.savePhoto}/> :\r\n                <Preloader/>}\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {ProfileType, savePhoto, setUserProfileTC, setUserStatusTC, updateStatusTC} from '../../Redux/profile-reducer';\r\nimport {AppRootStateType} from '../../Redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\n\r\n\r\nclass ProfileContainerAPI extends React.Component<CommonPropsType> {\r\n\r\n    onUpdateComponent() {\r\n\r\n        //if (+this.props.match.params.userId !== this.props.id) {\r\n            let userId = this.props.match.params.userId\r\n            if (!userId) {\r\n                userId = this.props.id!.toString()\r\n            }\r\n\r\n            this.props.setUserProfileTC(userId);\r\n            this.props.setUserStatusTC(userId);\r\n\r\n      //  }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onUpdateComponent();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: any) {\r\n        console.log('updateProps', prevProps, prevState);\r\n\r\n        if(prevProps.match.params.userId !== this.props.match.params.userId) {\r\n\r\n            this.onUpdateComponent();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatusTC={this.props.updateStatusTC} isOwner={this.props.myId === this.props.id} savePhoto={this.props.savePhoto}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        id: state.profilePage.profile?.userId,\r\n        myId:state.authMe.id\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n        {setUserStatusTC, setUserProfileTC, updateStatusTC, savePhoto}), withRouter, WithAuthRedirect\r\n    // ,WithAuthRedirect\r\n)(ProfileContainerAPI);\r\n\r\nexport type ProfileContainerPropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\ntype PathParamsType = { userId: string }\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null,\r\n    status: string\r\n    id?: number | null\r\n    myId:number | null\r\n\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setUserProfileAC: (profile: ProfileType) => void, setUserProfileTC: (userId: string) => void,\r\n    setUserStatusTC: (userId: string) => void, updateStatusTC: (status: string) => void,\r\n    savePhoto:(event:File)=>void\r\n}\r\n\r\n\r\n//\r\n// export default  WithAuthRedirect(withRouter(connect(mapStateToProps,\r\n//     {setUserProfileAC, setUserProfileTC})(ProfileContainerAPI)));\r\n\r\n//\r\n// let withURLDataContainerComponent = withRouter(ProfileContainerAPI);\r\n//\r\n// export default  WithAuthRedirect(connect(mapStateToProps,\r\n//     {setUserProfileAC, setUserProfileTC})(withURLDataContainerComponent));\r\n\r\n\r\n// let withURLDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n// export default compose<FC>(connect(mapStateToProps,\r\n//     {setUserProfileAC, setUserProfileTC}), WithAuthRedirect, withRouter) (ProfileContainerAPI);\r\n"],"names":["ProfileStatusWithHook","props","useState","editMode","setEditMode","status","value","setValue","useEffect","isOwner","autoFocus","onBlur","updateStatusTC","onChange","e","currentTarget","onDoubleClick","name","ProfileInfo","profile","src","process","className","s","photos","large","width","type","target","files","length","savePhoto","fullName","aboutMe","contacts","vk","twitter","instagram","github","Preloader","Post","photo","message","like","MyPosts","React","postsItems","posts","map","el","small","id","AddPostReduxForm","onSubmit","formDate","addPost","newPostBody","reduxForm","form","handleSubmit","Field","component","Input","placeholder","validate","requiredField","maxLength30","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainerAPI","userId","this","match","params","toString","setUserProfileTC","setUserStatusTC","onUpdateComponent","prevProps","prevState","console","log","myId","compose","authMe","withRouter","WithAuthRedirect"],"sourceRoot":""}