{"version":3,"file":"static/js/50.1db052f8.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHook/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__8sqKX\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string,\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHook: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [value, setValue] = useState<string>(props.status);\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value);\r\n    };\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const deactivateEditMode = () => {\r\n\r\n        setEditMode(false);\r\n        props.updateStatusTC(value)\r\n    };\r\nuseEffect(()=>{\r\n    setValue(props.status)\r\n},[props.status])\r\n    return <div>\r\n        {editMode\r\n            ? <div><input autoFocus onBlur={deactivateEditMode} onChange={onStatusChange}\r\n                          value={value}></input></div>\r\n            : <div><span\r\n                onDoubleClick={activateEditMode}>{value ?value : 'Your status'}</span>\r\n            </div>\r\n        }\r\n    </div>;\r\n\r\n};\r\n\r\n//     let [editMode,setEditMode]=useState<boolean>(false)\r\n//\r\n//\r\n// let onDoubleClickHandler=()=>{\r\n//         setEditMode(true)\r\n// }\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from '../../../Redux/profile-reducer';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHook} from './ProfileStatusWithHook/ProfileStatusWithHook';\r\n\r\ntype PropsType = { profile: ProfileType | null, status: string, updateStatusTC: (status: string) => void }\r\nexport const ProfileInfo: React.FC<PropsType> = (props) => {\r\n\r\n    if (!!props.profile) {\r\n        return <>\r\n            <div><img src={`${process.env.PUBLIC_URL}/img/fon.jpg`}/></div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={props.profile.photos.large ? props.profile.photos.large : `${process.env.PUBLIC_URL}/img/user5.png`}\r\n                    width={'200px'}/>\r\n                <div>\r\n                    {props.profile.fullName && <div>FullName: {props.profile.fullName}</div>}\r\n                    {props.profile.aboutMe && <div>aboutMe: {props.profile.aboutMe}</div>}\r\n                    <ProfileStatusWithHook status={props.status} updateStatusTC={props.updateStatusTC}/>\r\n\r\n                    <div>contacts:</div>\r\n                    {props.profile.contacts.vk && <div>vk:{props.profile.contacts.vk}</div>}\r\n                    {props.profile.contacts.twitter && <div>twitter:{props.profile.contacts.twitter}</div>}\r\n                    {props.profile.contacts.instagram && <div>instagram: {props.profile.contacts.instagram}</div>}\r\n                    {props.profile.contacts.github && <div>github: {props.profile.contacts.github}</div>}\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </>;\r\n    } else {\r\n        return <Preloader/>;\r\n    }\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__I7u66\",\"posts\":\"MyPosts_posts__84rU-\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Ury9y\",\"active\":\"Post_active__IvPWP\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    like:number\r\n}\r\n\r\nexport const Post:React.FC<PropsType>=(props)=> {\r\n    return (\r\n        <div className={s.item}><img src={`${process.env.PUBLIC_URL}/img/user5.png`}/>{props.message}\r\n            <div><span>like: {props.like}</span></div>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from './Post/Post';\r\nimport {MyPostContainerPropsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLength30, requiredField} from '../../../utils/validators/validators';\r\nimport {Input} from '../../common/FormsControls/FormsControls';\r\n\r\n\r\nexport const MyPosts=React.memo( (props: MyPostContainerPropsType)=> {\r\n\r\n    console.log('MyPosts');\r\n    let postsItems = props.posts.map(el =>\r\n        <Post key={el.id} message={el.message} like={el.like}/>);\r\n    const onSubmit = (formDate: any) => {\r\n        console.log(formDate);\r\n        props.addPost(formDate.newPostBody);\r\n        formDate.newPostBody = '';\r\n    };\r\n    return (\r\n        <div className={s.postsBlock}>\r\n\r\n            <h3>My post</h3>\r\n            <div>\r\n                <AddPostReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                <div>{postsItems}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n})\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps> = (props) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Input} name={'newPostBody'} placeholder={'Enter your post'}\r\n                       validate={[requiredField, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm({form: 'MyPostsAddMessageForm'})(AddPostForm);\r\n\r\n\r\n// const OnClickEnter = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n//     if (e.key === 'Enter') {\r\n//         addPost();\r\n//     }\r\n// };\r\n//\r\n// const onPostChange = () => {\r\n//     debugger\r\n//     let text = newPostElement.current?.value;\r\n//     if (text) {\r\n//         // const action: ActionType = updateNewPostTextTypeAC(text);\r\n//         // props.dispatch(action);\r\n//         this.props.updateNewPostText(text);\r\n//     }\r\n// };\r\n\r\n//\r\n// let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n// const addPost = () => {\r\n//\r\n//\r\n//     let text = newPostElement.current?.value;\r\n//     if (text) {\r\n//         // const action = AddPostActionCreator();\r\n//         // props.dispatch(action);\r\n//         this.props.addPost();\r\n//     }\r\n\r\n// };","import React from 'react';\r\nimport {addPost, PostType} from '../../../Redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {MyPosts} from './MyPosts';\r\nimport {AppRootStateType} from '../../../Redux/redux-store';\r\n\r\n\r\nexport type MyPostContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype mapStateToPropsType = { posts: PostType[] }\r\ntype mapDispatchToPropsType = {\r\n    addPost: (post: string) => void,\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\r\n\r\n    return {\r\n        posts: state.profilePage.posts\r\n    };\r\n};\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost\r\n})(MyPosts);\r\n\r\n\r\n\r\n// type PropsType = {\r\n//     state: { posts: PostsType, newPostText: string }\r\n//     dispatch: (action: ActionType) => void\r\n// }\r\n\r\n//\r\n//\r\n// export const MyPostsContainer: React.FC = (props) => {\r\n\r\n// const addPost = () => {\r\n//     const action = AddPostActionCreator();\r\n//     props.dispatch(action);\r\n//\r\n// };\r\n//\r\n//\r\n// const onPostChange = (text: string) => {\r\n//     const action: ActionType = updateNewPostTextTypeAC(text);\r\n//     props.dispatch(action);\r\n//\r\n// };\r\n\r\n//     return (\r\n//         <StoreContext.Consumer>{\r\n//             (store)=> {\r\n//                 const addPost = () => {\r\n//                     const action = AddPostActionCreator();\r\n//                     store.dispatch(action);\r\n//\r\n//                 };\r\n//\r\n//\r\n//                 const onPostChange = (text: string) => {\r\n//                     const action: ActionType = updateNewPostTextTypeAC(text);\r\n//                     store.dispatch(action);\r\n//\r\n//                 };\r\n//\r\n//                 return (\r\n//                     <MyPosts posts={store.getState().profilePage.posts}\r\n//                              newPostText={store.getState().profilePage.newPostText}\r\n//                              updateNewPostText={onPostChange}\r\n//                              addPost={addPost}/>);\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n//\r\n//     );\r\n// };\r\n//","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport {ProfileContainerPropsType} from './ProfileContainer';\r\n\r\n//\r\ntype PropsType = ProfileContainerPropsType\r\n\r\n\r\nexport const Profile: React.FC<PropsType> = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={s.content}>\r\n\r\n            {props.profile ? <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC}/> : <Preloader/>}\r\n            {/*<MyPostsContainer state={props.state} dispatch={props.dispatch}/>*/}\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {ProfileType, setUserProfileTC, setUserStatusTC, updateStatusTC} from '../../Redux/profile-reducer';\r\nimport {AppRootStateType} from '../../Redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\n\r\n\r\nclass ProfileContainerAPI extends React.Component<CommonPropsType> {\r\n\r\n    onUpdateComponent() {\r\n        if (+this.props.match.params.userId!==this.props.id){\r\n        let userId = this.props.match.params.userId;\r\n        this.props.setUserProfileTC(userId);\r\n        this.props.setUserStatusTC(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onUpdateComponent();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.onUpdateComponent();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatusTC={this.props.updateStatusTC}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        id:state.profilePage.profile?.userId\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n        {setUserStatusTC, setUserProfileTC, updateStatusTC}), withRouter, WithAuthRedirect\r\n    // ,WithAuthRedirect\r\n)(ProfileContainerAPI);\r\n\r\nexport type ProfileContainerPropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\ntype PathParamsType = { userId: string }\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null,\r\n    status: string\r\n    id?:number|null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setUserProfileAC: (profile: ProfileType) => void, setUserProfileTC: (userId: string) => void,\r\n    setUserStatusTC: (userId: string) => void, updateStatusTC: (status: string) => void\r\n}\r\n\r\n\r\n//\r\n// export default  WithAuthRedirect(withRouter(connect(mapStateToProps,\r\n//     {setUserProfileAC, setUserProfileTC})(ProfileContainerAPI)));\r\n\r\n//\r\n// let withURLDataContainerComponent = withRouter(ProfileContainerAPI);\r\n//\r\n// export default  WithAuthRedirect(connect(mapStateToProps,\r\n//     {setUserProfileAC, setUserProfileTC})(withURLDataContainerComponent));\r\n\r\n\r\n// let withURLDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n// export default compose<FC>(connect(mapStateToProps,\r\n//     {setUserProfileAC, setUserProfileTC}), WithAuthRedirect, withRouter) (ProfileContainerAPI);\r\n"],"names":["ProfileStatusWithHook","props","useState","editMode","setEditMode","status","value","setValue","useEffect","autoFocus","onBlur","updateStatusTC","onChange","e","currentTarget","onDoubleClick","ProfileInfo","profile","src","process","className","s","photos","large","width","fullName","aboutMe","contacts","vk","twitter","instagram","github","Preloader","Post","message","like","MyPosts","React","console","log","postsItems","posts","map","el","id","AddPostReduxForm","onSubmit","formDate","addPost","newPostBody","reduxForm","form","handleSubmit","Field","component","Input","name","placeholder","validate","requiredField","maxLength30","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainerAPI","this","match","params","userId","setUserProfileTC","setUserStatusTC","onUpdateComponent","compose","withRouter","WithAuthRedirect"],"sourceRoot":""}